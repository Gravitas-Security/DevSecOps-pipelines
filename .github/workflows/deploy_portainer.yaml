name: 'Deploy Cloudflare Infrastructure'

on:
  workflow_call:
    inputs:
      tf_version:
        type: string
        required: true
    secrets:
      PORTAINER_UNAME:
        required: true
      PORTAINER_PWORD:
        required: true
      TF_API_TOKEN:
        required: true
      GH_UNAME:
        required: true
      GH_PWORD:
        required: true
      PORTAINER_ENDPOINT:
        required: true

jobs:
        
  terraform:
    name: 'Terraform'
    runs-on: self-hosted
    strategy:
      fail-fast: false
    defaults:
      run:
        shell: bash
        working-directory: infra
    env:
      TF_VAR_gh_uname: ${{ secrets.GH_UNAME }}
      TF_VAR_gh_pword: ${{ secrets.GH_PWORD }}
      TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
      TF_VAR_portainer_uname: ${{ secrets.PORTAINER_UNAME }}
      TF_VAR_portainer_pword: ${{ secrets.PORTAINER_PWORD }}    
      TF_VAR_PORTAINER_ENDPOINT: ${{ secrets.PORTAINER_ENDPOINT }}
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3.3.0

    - name: Check for Terraform files
      run: ls -al *.tf || echo "No Terraform files found in working directory."

    # Install the preferred version of Terraform CLI 
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.7
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
    
    - name: Terraform Init
      id: init
      run: terraform init -input=false

    - name: Terraform validation
      id: validate
      run: terraform validate

    - name: Terraform fmt
      id: fmt
      run: terraform fmt -recursive
      
    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -input=false -no-color
      
    - name: Post Terraform Plan to PR
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Try to find the starting index of the desired sections.
            const planOutput = process.env.PLAN.indexOf('Terraform used the selected providers to generate the following execution');
            const noChanges = process.env.PLAN.indexOf('No changes. Your infrastructure matches the configuration.');

            let filteredPlan = "";

            // Check which section is present and capture the appropriate content.
            if (planOutput !== -1) {
              filteredPlan = process.env.PLAN.slice(planOutput);
            } else if (noChanges !== -1) {
              filteredPlan = 'No changes. Your infrastructure matches the configuration.';
            } else {
              filteredPlan = process.env.PLAN; // fallback to the original content if neither section is found.
            }
            
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('${{ github.workflow }} ${{ matrix.dir }}')
            })

            // 2. Prepare format of the comment
            const output = `#### ${{ github.workflow }} ${{ matrix.dir }} 
            #### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan Results</summary>

            \`\`\`\n
            ${filteredPlan}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
          
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve
