name: Deploy AWS Infrastructure

on:
  workflow_call:
    inputs:
      working-directory:
        required: true
        type: string
    secrets:
      aws_role:
        required: true
      tf_api_token:
        required: true

jobs:
  terraform_deploy:
    name: Deploy AWS infrastructure
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working-directory }}
    steps:

    - name: Checkout Repo
      uses: actions/checkout@v3.3.0

    - name: configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: us-west-2
        role-to-assume: ${{ secrets.aws_role }}
        role-duration-seconds: 3600

    - name: Run Terraform
      uses: hashicorp/setup-terraform@v2.0.3
      with:
        terraform_version: 1.3.3
        terraform_wrapper: true
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        
    # - uses: webfactory/ssh-agent@v0.7.0
    #   with:
    #       ssh-private-key: ${{ secrets.SSH_KEY }}
      
    - name: Terraform init
      run: terraform init -input=false
      continue-on-error: false
      env:
        TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}

    - name: Terraform validation
      id: validate
      run: terraform validate

    - name: Terraform plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color -input=false
      continue-on-error: false
      env:
        TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
      
    - uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
    
    - name: Set up Python 3.8
      uses: actions/setup-python@v4.5.0
      with:
        python-version: 3.8
        
    - name: Test with Checkov
      id: checkov
      uses: bridgecrewio/checkov-action@v12.1347.0
      if: github.event_name == 'pull_request'
      with:
        directory: ${{ inputs.working-directory }}
        framework: terraform 
      
    - name: Terraform apply
      id : apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false
      env:
        TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
