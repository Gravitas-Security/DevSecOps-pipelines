name: Deploy AWS Infrastructure

on:
  workflow_call:
    inputs:
      region:
        type: string
        required: true
      tf_version:
        type: string
        required: true
    secrets:
      aws_role:
        required: true
      tf_api_token:
        required: true
      jumpcloud_api_key:
        required: true
permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout
  pull-requests: write # This is required to Write the PR Comment

jobs:
  gather_changes:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    outputs:
      directories: ${{ steps.directories.outputs.modules }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3.3.0
        with:
          fetch-depth: 0

      - name: Generate Matrix
        uses: theappnest/terraform-monorepo-action@master
        id: directories
          
  terraform_deploy:
    name: Deploy AWS infrastructure
    runs-on: ubuntu-latest
    needs: gather_changes
    strategy:
      fail-fast: false
      matrix: 
        dir:  ${{ fromJson(needs.gather_changes.outputs.directories) }}
    defaults:
      run:
        shell: bash
        working-directory: ${{ matrix.dir }}
    steps:

    - name: Checkout Repo
      uses: actions/checkout@v3.3.0

    - name: configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ inputs.region }}
        role-to-assume: ${{ secrets.AWS_ROLE }}
        role-duration-seconds: 3600

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ inputs.tf_version }}
        terraform_wrapper: true
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      env:
        jumpcloud_api_key: ${{ secrets.JUMPCLOUD_API_KEY }}

    - name: Terraform init
      id: init
      run: terraform init -input=false
      continue-on-error: false

    - name: Terraform validation
      id: validate
      run: terraform validate -no-color

    - name: Terraform format
      id: fmt
      run: terraform fmt -recursive

    - name: Terraform plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color -input=false 
      continue-on-error: false
      
    - name: Post Terraform Plan to PR
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Try to find the starting index of the desired sections.
            const planOutput = process.env.PLAN.indexOf('Terraform used the selected providers to generate the following execution');
            const noChanges = process.env.PLAN.indexOf('No changes. Your infrastructure matches the configuration.');

            let filteredPlan = "";

            // Check which section is present and capture the appropriate content.
            if (planOutput !== -1) {
              filteredPlan = process.env.PLAN.slice(planOutput);
            } else if (noChanges !== -1) {
              filteredPlan = 'No changes. Your infrastructure matches the configuration.';
            } else {
              filteredPlan = process.env.PLAN; // fallback to the original content if neither section is found.
            }
            
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('${{ github.workflow }} ${{ matrix.dir }}')
            })

            // 2. Prepare format of the comment
            const output = `#### ${{ github.workflow }} ${{ matrix.dir }}
            #### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan Results</summary>

            \`\`\`\n
            ${filteredPlan}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
       
    - name: Scan with Checkov
      id: checkov
      uses: bridgecrewio/checkov-action@v12.1347.0
      if: github.event_name == 'pull_request'
      with:
        directory: ${{ matrix.dir }}
        framework: terraform 
        output_format: cli
        download_external_modules: true

    - name: Post Checkov Scan to PR
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Checkov Scan Results ${{ matrix.dir }}')
            })

            // 2. Prepare format of the comment
            const output = `#### Checkov Scan Results ${{ matrix.dir }} üñå\`${{ steps.checkov.outcome }}\`

            <details><summary>Show Scan Results</summary>

            \`\`\`\n
            ${process.env.CHECKOV_RESULTS}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
      
    - name: Terraform apply
      id : apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false
